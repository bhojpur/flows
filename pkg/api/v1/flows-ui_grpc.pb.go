// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowsUIClient is the client API for FlowsUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowsUIClient interface {
	// ListDocumentSpecs returns a list of Document that can be started through the UI.
	ListDocumentSpecs(ctx context.Context, in *ListDocumentSpecsRequest, opts ...grpc.CallOption) (FlowsUI_ListDocumentSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type flowsUIClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowsUIClient(cc grpc.ClientConnInterface) FlowsUIClient {
	return &flowsUIClient{cc}
}

func (c *flowsUIClient) ListDocumentSpecs(ctx context.Context, in *ListDocumentSpecsRequest, opts ...grpc.CallOption) (FlowsUI_ListDocumentSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowsUI_ServiceDesc.Streams[0], "/v1.FlowsUI/ListDocumentSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowsUIListDocumentSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowsUI_ListDocumentSpecsClient interface {
	Recv() (*ListDocumentSpecsResponse, error)
	grpc.ClientStream
}

type flowsUIListDocumentSpecsClient struct {
	grpc.ClientStream
}

func (x *flowsUIListDocumentSpecsClient) Recv() (*ListDocumentSpecsResponse, error) {
	m := new(ListDocumentSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowsUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.FlowsUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowsUIServer is the server API for FlowsUI service.
// All implementations must embed UnimplementedFlowsUIServer
// for forward compatibility
type FlowsUIServer interface {
	// ListDocumentSpecs returns a list of Document that can be started through the UI.
	ListDocumentSpecs(*ListDocumentSpecsRequest, FlowsUI_ListDocumentSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedFlowsUIServer()
}

// UnimplementedFlowsUIServer must be embedded to have forward compatible implementations.
type UnimplementedFlowsUIServer struct {
}

func (UnimplementedFlowsUIServer) ListDocumentSpecs(*ListDocumentSpecsRequest, FlowsUI_ListDocumentSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDocumentSpecs not implemented")
}
func (UnimplementedFlowsUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedFlowsUIServer) mustEmbedUnimplementedFlowsUIServer() {}

// UnsafeFlowsUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowsUIServer will
// result in compilation errors.
type UnsafeFlowsUIServer interface {
	mustEmbedUnimplementedFlowsUIServer()
}

func RegisterFlowsUIServer(s grpc.ServiceRegistrar, srv FlowsUIServer) {
	s.RegisterService(&FlowsUI_ServiceDesc, srv)
}

func _FlowsUI_ListDocumentSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDocumentSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowsUIServer).ListDocumentSpecs(m, &flowsUIListDocumentSpecsServer{stream})
}

type FlowsUI_ListDocumentSpecsServer interface {
	Send(*ListDocumentSpecsResponse) error
	grpc.ServerStream
}

type flowsUIListDocumentSpecsServer struct {
	grpc.ServerStream
}

func (x *flowsUIListDocumentSpecsServer) Send(m *ListDocumentSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlowsUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlowsUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowsUI_ServiceDesc is the grpc.ServiceDesc for FlowsUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowsUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FlowsUI",
	HandlerType: (*FlowsUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _FlowsUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDocumentSpecs",
			Handler:       _FlowsUI_ListDocumentSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flows-ui.proto",
}
