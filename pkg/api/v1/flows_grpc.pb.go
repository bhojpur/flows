// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowsServiceClient is the client API for FlowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowsServiceClient interface {
	// StartLocalDocument starts a Workflow Document on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the flows/config.yaml
	//   3. all bytes constituting the Document YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDocument(ctx context.Context, opts ...grpc.CallOption) (FlowsService_StartLocalDocumentClient, error)
	// StartFromPreviousDocument starts a new Document based on a previous one.
	// If the previous Document does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDocument(ctx context.Context, in *StartFromPreviousDocumentRequest, opts ...grpc.CallOption) (*StartDocumentResponse, error)
	// StartDocumentRequest starts a new Document based on its specification.
	StartDocument(ctx context.Context, in *StartDocumentRequest, opts ...grpc.CallOption) (*StartDocumentResponse, error)
	// Searches for Document known to this instance
	ListDocument(ctx context.Context, in *ListDocumentRequest, opts ...grpc.CallOption) (*ListDocumentResponse, error)
	// Subscribe listens to new Document updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FlowsService_SubscribeClient, error)
	// GetDocument retrieves details of a single Document
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// Listen listens to Document updates and log output of a running Document
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (FlowsService_ListenClient, error)
	// StopDocument stops a currently running Document
	StopDocument(ctx context.Context, in *StopDocumentRequest, opts ...grpc.CallOption) (*StopDocumentResponse, error)
}

type flowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowsServiceClient(cc grpc.ClientConnInterface) FlowsServiceClient {
	return &flowsServiceClient{cc}
}

func (c *flowsServiceClient) StartLocalDocument(ctx context.Context, opts ...grpc.CallOption) (FlowsService_StartLocalDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowsService_ServiceDesc.Streams[0], "/v1.FlowsService/StartLocalDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowsServiceStartLocalDocumentClient{stream}
	return x, nil
}

type FlowsService_StartLocalDocumentClient interface {
	Send(*StartLocalDocumentRequest) error
	CloseAndRecv() (*StartDocumentResponse, error)
	grpc.ClientStream
}

type flowsServiceStartLocalDocumentClient struct {
	grpc.ClientStream
}

func (x *flowsServiceStartLocalDocumentClient) Send(m *StartLocalDocumentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flowsServiceStartLocalDocumentClient) CloseAndRecv() (*StartDocumentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowsServiceClient) StartFromPreviousDocument(ctx context.Context, in *StartFromPreviousDocumentRequest, opts ...grpc.CallOption) (*StartDocumentResponse, error) {
	out := new(StartDocumentResponse)
	err := c.cc.Invoke(ctx, "/v1.FlowsService/StartFromPreviousDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowsServiceClient) StartDocument(ctx context.Context, in *StartDocumentRequest, opts ...grpc.CallOption) (*StartDocumentResponse, error) {
	out := new(StartDocumentResponse)
	err := c.cc.Invoke(ctx, "/v1.FlowsService/StartDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowsServiceClient) ListDocument(ctx context.Context, in *ListDocumentRequest, opts ...grpc.CallOption) (*ListDocumentResponse, error) {
	out := new(ListDocumentResponse)
	err := c.cc.Invoke(ctx, "/v1.FlowsService/ListDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FlowsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowsService_ServiceDesc.Streams[1], "/v1.FlowsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type flowsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *flowsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowsServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/v1.FlowsService/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (FlowsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowsService_ServiceDesc.Streams[2], "/v1.FlowsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type flowsServiceListenClient struct {
	grpc.ClientStream
}

func (x *flowsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flowsServiceClient) StopDocument(ctx context.Context, in *StopDocumentRequest, opts ...grpc.CallOption) (*StopDocumentResponse, error) {
	out := new(StopDocumentResponse)
	err := c.cc.Invoke(ctx, "/v1.FlowsService/StopDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowsServiceServer is the server API for FlowsService service.
// All implementations must embed UnimplementedFlowsServiceServer
// for forward compatibility
type FlowsServiceServer interface {
	// StartLocalDocument starts a Workflow Document on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the flows/config.yaml
	//   3. all bytes constituting the Document YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDocument(FlowsService_StartLocalDocumentServer) error
	// StartFromPreviousDocument starts a new Document based on a previous one.
	// If the previous Document does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDocument(context.Context, *StartFromPreviousDocumentRequest) (*StartDocumentResponse, error)
	// StartDocumentRequest starts a new Document based on its specification.
	StartDocument(context.Context, *StartDocumentRequest) (*StartDocumentResponse, error)
	// Searches for Document known to this instance
	ListDocument(context.Context, *ListDocumentRequest) (*ListDocumentResponse, error)
	// Subscribe listens to new Document updates
	Subscribe(*SubscribeRequest, FlowsService_SubscribeServer) error
	// GetDocument retrieves details of a single Document
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// Listen listens to Document updates and log output of a running Document
	Listen(*ListenRequest, FlowsService_ListenServer) error
	// StopDocument stops a currently running Document
	StopDocument(context.Context, *StopDocumentRequest) (*StopDocumentResponse, error)
	mustEmbedUnimplementedFlowsServiceServer()
}

// UnimplementedFlowsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowsServiceServer struct {
}

func (UnimplementedFlowsServiceServer) StartLocalDocument(FlowsService_StartLocalDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDocument not implemented")
}
func (UnimplementedFlowsServiceServer) StartFromPreviousDocument(context.Context, *StartFromPreviousDocumentRequest) (*StartDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDocument not implemented")
}
func (UnimplementedFlowsServiceServer) StartDocument(context.Context, *StartDocumentRequest) (*StartDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDocument not implemented")
}
func (UnimplementedFlowsServiceServer) ListDocument(context.Context, *ListDocumentRequest) (*ListDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocument not implemented")
}
func (UnimplementedFlowsServiceServer) Subscribe(*SubscribeRequest, FlowsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedFlowsServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedFlowsServiceServer) Listen(*ListenRequest, FlowsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedFlowsServiceServer) StopDocument(context.Context, *StopDocumentRequest) (*StopDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDocument not implemented")
}
func (UnimplementedFlowsServiceServer) mustEmbedUnimplementedFlowsServiceServer() {}

// UnsafeFlowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowsServiceServer will
// result in compilation errors.
type UnsafeFlowsServiceServer interface {
	mustEmbedUnimplementedFlowsServiceServer()
}

func RegisterFlowsServiceServer(s grpc.ServiceRegistrar, srv FlowsServiceServer) {
	s.RegisterService(&FlowsService_ServiceDesc, srv)
}

func _FlowsService_StartLocalDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowsServiceServer).StartLocalDocument(&flowsServiceStartLocalDocumentServer{stream})
}

type FlowsService_StartLocalDocumentServer interface {
	SendAndClose(*StartDocumentResponse) error
	Recv() (*StartLocalDocumentRequest, error)
	grpc.ServerStream
}

type flowsServiceStartLocalDocumentServer struct {
	grpc.ServerStream
}

func (x *flowsServiceStartLocalDocumentServer) SendAndClose(m *StartDocumentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flowsServiceStartLocalDocumentServer) Recv() (*StartLocalDocumentRequest, error) {
	m := new(StartLocalDocumentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FlowsService_StartFromPreviousDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsServiceServer).StartFromPreviousDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlowsService/StartFromPreviousDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsServiceServer).StartFromPreviousDocument(ctx, req.(*StartFromPreviousDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowsService_StartDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsServiceServer).StartDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlowsService/StartDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsServiceServer).StartDocument(ctx, req.(*StartDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowsService_ListDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsServiceServer).ListDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlowsService/ListDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsServiceServer).ListDocument(ctx, req.(*ListDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowsServiceServer).Subscribe(m, &flowsServiceSubscribeServer{stream})
}

type FlowsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type flowsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *flowsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlowsService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlowsService/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowsServiceServer).Listen(m, &flowsServiceListenServer{stream})
}

type FlowsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type flowsServiceListenServer struct {
	grpc.ServerStream
}

func (x *flowsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlowsService_StopDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowsServiceServer).StopDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlowsService/StopDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowsServiceServer).StopDocument(ctx, req.(*StopDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowsService_ServiceDesc is the grpc.ServiceDesc for FlowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FlowsService",
	HandlerType: (*FlowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDocument",
			Handler:    _FlowsService_StartFromPreviousDocument_Handler,
		},
		{
			MethodName: "StartDocument",
			Handler:    _FlowsService_StartDocument_Handler,
		},
		{
			MethodName: "ListDocument",
			Handler:    _FlowsService_ListDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _FlowsService_GetDocument_Handler,
		},
		{
			MethodName: "StopDocument",
			Handler:    _FlowsService_StopDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDocument",
			Handler:       _FlowsService_StartLocalDocument_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _FlowsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _FlowsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flows.proto",
}
